#include <Wire.h> 
#include <SPI.h> 
#include <LoRa.h> 
#include <Adafruit_BMP280.h> 
#include <Adafruit_MPU6050.h> 
#include <Adafruit_Sensor.h> 
#include <TinyGPS++.h> 
#include <HardwareSerial.h> 
#include <LiquidCrystal_I2C.h> 
#include "MAX30105.h" 
#include "heartRate.h" 
 
// ----- LoRa Pins for ESP32 ----- 
#define SS      5 
#define RST     14 
#define DIO0    26 
 
// ----- BMP280 I2C Address ----- 
#define BMP280_ADDRESS 0x76 
 
// ----- LCD Setup ----- 
LiquidCrystal_I2C lcd(0x27, 16, 2); // LCD at I2C address 0x27 
unsigned long lastToggleTime = 0; 
const unsigned long displayInterval = 10000; // 10 seconds 
bool showPhagwara = false; 
 
// ----- Sensor and GPS Setup ----- 
Adafruit_BMP280 bmp; 
Adafruit_MPU6050 mpu; 
TinyGPSPlus gps; 
HardwareSerial gpsSerial(2); // UART2: RX=16, TX=17 
 
unsigned long lastSensorRead = 0; 
const unsigned long sensorInterval = 5000; // 5 seconds 
 
// ----- Heart Rate Sensor Setup ----- 
MAX30105 particleSensor; 
const byte RATE_SIZE = 4; // Increase this for more averaging 
byte rates[RATE_SIZE]; // Array of heart rates 
byte rateSpot = 0; 
long lastBeat = 0; // Time at which the last beat occurred 
float beatsPerMinute; 
int beatAvg; 
 
void setup() { 
  Serial.begin(115200); 
  while (!Serial); 
 
  // I2C Init 
  Wire.begin(21, 22); // SDA, SCL 
 
  // LCD Init 
  lcd.init(); 
  lcd.backlight(); 
  lcd.setCursor(0, 0); 
  lcd.print("Look Here"); 
  lcd.setCursor(0, 1); 
  lcd.print("if you forget"); 
  lastToggleTime = millis(); 
 
  // BMP280 Init 
  if (!bmp.begin(BMP280_ADDRESS)) { 
    Serial.println(" Could not find BMP280 sensor!"); 
    while (1); 
  } 
  Serial.println(" BMP280 sensor initialized."); 
 
  // MPU6050 Init 
  if (!mpu.begin()) { 
    Serial.println(" Failed to find MPU6050 chip"); 
    while (1); 
  } 
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G); 
  mpu.setGyroRange(MPU6050_RANGE_500_DEG); 
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ); 
  delay(100); 
  Serial.println(" MPU6050 sensor initialized."); 
 
  // GPS Init 
  gpsSerial.begin(9600, SERIAL_8N1, 16, 17); 
  Serial.println(" GPS Module Reading Started..."); 
 
  // LoRa Init 
  LoRa.setPins(SS, RST, DIO0); 
  if (!LoRa.begin(433E6)) { 
    Serial.println(" Starting LoRa failed!"); 
    while (1); 
  } 
  LoRa.setSyncWord(0xF3); 
  Serial.println(" LoRa Sender Initialized"); 
 
  // Heart Rate Sensor Init 
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) { 
    Serial.println(" MAX30105 sensor not found!"); 
    while (1); 
  } 
  particleSensor.setup(); 
  particleSensor.setPulseAmplitudeRed(0x0A); // Low Red LED 
  particleSensor.setPulseAmplitudeGreen(0);  // No Green LED 
  Serial.println(" MAX30105 sensor initialized."); 
} 
 
void loop() { 
  // ----- Handle LCD Message Toggle Every 10 Seconds ----- 
  if (millis() - lastToggleTime >= displayInterval) { 
    lcd.clear(); 
    if (showPhagwara) { 
      lcd.setCursor(0, 0); 
      lcd.print("Look Here"); 
      lcd.setCursor(0, 1); 
      lcd.print("if you forget"); 
    } else { 
      lcd.setCursor(0, 0); 
      lcd.print("Addr : Phagwara"); 
      lcd.setCursor(7, 1); 
      lcd.print("LPU"); 
    } 
    showPhagwara = !showPhagwara; 
    lastToggleTime = millis(); 
  } 
 
  // ----- Continuously read from GPS ----- 
  while (gpsSerial.available() > 0) { 
    gps.encode(gpsSerial.read()); 
  } 
 
  // ----- Read and Send Sensor Data Every 5 Seconds ----- 
  if (millis() - lastSensorRead >= sensorInterval) { 
    float temperature = bmp.readTemperature(); 
    float pressure = bmp.readPressure() / 100.0F; 
 
    sensors_event_t a, g, temp; 
    mpu.getEvent(&a, &g, &temp); 
 
    // Heart Rate Sensor Read 
    long irValue = particleSensor.getIR(); 
    if (checkForBeat(irValue)) { 
      long delta = millis() - lastBeat; 
      lastBeat = millis(); 
      beatsPerMinute = 60 / (delta / 1000.0); 
      if (beatsPerMinute < 255 && beatsPerMinute > 20) { 
        rates[rateSpot++] = (byte)beatsPerMinute; 
        rateSpot %= RATE_SIZE; 
 
        beatAvg = 0; 
        for (byte x = 0; x < RATE_SIZE; x++) 
          beatAvg += rates[x]; 
        beatAvg /= RATE_SIZE; 
      } 
    } 
 
    String data = "Temp: " + String(temperature, 2) + "Â°C, "; 
    data += "Pressure: " + String(pressure, 2) + " hPa, "; 
    data += "Accel: [" + String(a.acceleration.x, 2) + "," + 
String(a.acceleration.y, 2) + "," + String(a.acceleration.z, 2) + "], 
"; 
    data += "Gyro: [" + String(g.gyro.x, 2) + "," + String(g.gyro.y, 
2) + "," + String(g.gyro.z, 2) + "], "; 
 
    // GPS Data 
    if (gps.location.isUpdated() && gps.location.isValid()) { 
      data += "GPS: Lat " + String(gps.location.lat(), 6) + ", Lng " 
+ String(gps.location.lng(), 6); 
    } else { 
      data += "GPS: Waiting for GPS fix..."; 
    } 
 
    // Heart rate data 
    data += ", BPM: " + String(beatsPerMinute, 2) + ", Avg BPM: 
" + String(beatAvg); 
 
    // Send data over LoRa 
    LoRa.beginPacket(); 
    LoRa.print(data); 
    LoRa.endPacket(); 
 
    Serial.println(" Sending via LoRa: " + data); 
    Serial.println("-------------------------------------------------"); 
 
    lastSensorRead = millis(); 
  }
